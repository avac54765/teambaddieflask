""" database dependencies to support sqliteDB examples """
from random import randrange
from datetime import date
import os, base64
import json

from __init__ import app, db
from sqlalchemy.exc import IntegrityError
from werkzeug.security import generate_password_hash, check_password_hash


''' Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into Python shell and follow along '''



### INSPO DATABASE

# Defining Inspo class for Inspo_data table with quotes 

class Inspo(db.Model):
    __tablename__ = 'Inspo_data'  # table name is plural, class name is singular

    # definining schema
    id = db.Column(db.Integer, primary_key=True)
    _uid = db.Column(db.String(255), unique=True, nullable=False)
    _quote = db.Column(db.String, unique=False, nullable=False)
    
    

    # initializes variables within object
    def __init__(self, id, uid, quote):
        self.userID = id
        self._uid = uid
        self._quote = quote



     # FOR INSPO PAGE:

    @property
    def uid(self):
        return self._uid
    
    # a setter function for object
    @uid.setter
    def uid(self, uid):
        self._uid = uid
        
    def is_uid(self, uid):
        return self._uid == uid

    
    # getter method, extracts quote from object
    @property
    def quote(self):
        return self._quote
    
    # a setter function for updating quotes
    @quote.setter
    def quote(self, quote):
        self._quote = quote
    
   
    # preparing for API
    def __str__(self):
        return json.dumps(self.read())

    # Creating a new quote
    def create(self):
        try:
            db.session.add(self) 
            db.session.commit()  
            return self
        except IntegrityError:
            db.session.remove()
            return None

    # returns dictionary
    def read(self):
        return {
            "id": self.id,
            "uid": self.uid,
            "quote": self.quote
        }


"""Database Creation and Testing """


# data for testing
def initInspos():
    with app.app_context():
        """Create database and tables"""
        db.create_all()
        """Tester data for table"""
        i1 = Inspo(id='2', uid='alexa2', quote= 'You are strong')
        i2 = Inspo(id='11', uid='ava2', quote= 'Do not quit!')
        i3 = Inspo(id='55', uid='lydia2', quote= 'Slay bestie')
        i4 = Inspo(id='33', uid='Sri2', quote= 'be like super mort')
        i5 = Inspo(id='44', uid='Nikhil2', quote= 'hard work beats talent!')

        inspos = [i1, i2, i3, i4, i5]

        """Builds sample user/note(s) data"""
        for inspo in inspos:
            try:
                '''add a few 1 to 4 notes per user'''
                for num in range(randrange(1, 4)):
                 # note = "#### " + user.name + " note " + str(num) + ". \n Generated by test data."
                    '''add Inspo data to table'''
                inspo.create()
            except IntegrityError:
                '''fails with bad or duplicate data'''
                db.session.remove()
                print(f"Records exist, duplicate email, or error: {Inspo.id}")
    
